/*
 * user_tests.h
 *
 *  Created on: Mar 8, 2020
 *      Author: Gerard Planella
 */

#ifndef SRC_USER_TESTS_H_
#define SRC_USER_TESTS_H_

#include <stdio.h>

#include "xparameters.h"
#include "xdebug.h"
#include "xil_types.h"


/*---- User Libraries ---- */
#include "user_gpio.h"
#include "user_dma.h"
#include "user_interrupts.h"
#include "user_types.h"
#include "user_trafgen.h"

#define RESULTS_VISUALIZE  0x1
#define AVERAGE_VISUALIZE  0x2
#define VISUALIZE_LATENCY 0x4
#define RESULTS_NVISUALIZE 0



#define DDR_READ_ERROR 0

#define TESTS_MM2S 0
#define TESTS_S2MM 10
#define TESTS_LATENCY 10

#define MODES 2

#define COMBINATIONS_PEAKS 7
#define COMBINATIONS_CONST 4
#define COMBINATIONS_RAND  COMBINATIONS_CONST

#define SUB_TESTS 2 //S2MM Latency and Rest(Throughput, Drop Rate, ...)

//Decimal Places for results
#define DP_DROP 1000
#define DP_THRP 1000

#define TEST_TIMEOUT 1000000

//Initiates memories for both metrics tests
int test_init_memories(char mm2s, u32 address, u32 dataLength);
//Initiates the counters for the both metrics tests
void test_init_counters(u32 option);
//Analyzes the results from every test
int user_tests_analyse_results(int nTests, Result *results, Result *average, char option);
//Fills RAM with nBytes bytes, incrementing by 0x1h and starting at XPAR_PS7_DDR_0_S_AXI_BASEADDR
int user_tests_fillDDR(u32 address, u32 nBytes, char empty);
//Returns the total number of bytes written in the RAM
u32 user_tests_readDDR(u32 address, u32 nBytes);
//Converts upper and lower values of a float represented by two numbers to a string
void visualizeFloat(char number_string[MAXC],int decimalPlaces, u32 value_upper, u32 value_lower);


/*
 * TEST 1- FIFO to and From DDR
 */
//Performs a transaction from DDR to FIFO and then from FIFO to DDR
int user_tests_1(int nTest, u32 nBytes, Result *result, char mm2s, u32 address);
//If empty is NEMPTY the FIFO is filled with nBytes bytes. If empty is EMPTY the FIFO is restarted
int user_tests_fillFIFO(u32 address, u32 nBytes, char empty);
//Calculates t_profiling and t_latency and inserts the results into results[mm2s]
int test_1_profiling_latency(Result *result, char mm2s, u32 address);
//Calculates t_total, total_bytes and drop_rate and inserts the results into results[mm2s]
int test_1_dropping(u32 nBytes, Result *result, char mm2s, u32 address);
//Verifies if a transfer has been executed correctly by checking the memories and DMA status register and error flags, returns amount of data transferred correctly
int test_verify_transfer(char option, char mm2s, u32 dataLength, DmaFlags flags, u32 address, FifoParams *fifo, u32* read);

/*
 * TEST 3 - Traffic Generator to DDR
 */

//Performs a test to measure the latency time
int user_tests_3_latency(Result *result, u32 address);
//Performs a test for a certain mode and calculates the throughput, drop rate and profiling
int user_tests_3_mode(u32 nBytes, u32 mode, u32 length, u16 delay, u32 start_addr, Result *result);

////Verifies the transfer for the Traffic Generator tests
//int test_3_verify_transfer(char option, u32 nBytes, DmaFlags flags, u32 address, FifoParams *fifo, TrafGenState *trafgen, AxisCount *stream);
int test_3_verify_transfer(char option, u32 nBytes, DmaFlags flags, u32 address, FifoParams *fifo, TrafGenState *trafgen);






#endif /* SRC_USER_TESTS_H_ */
