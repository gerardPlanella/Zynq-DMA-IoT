/*
 * user_tests.c
 *
 *  Created on: Mar 8, 2020
 *      Author: Gerard Planella Fontanillas
 */

#include "user_tests.h"

//Performs a transaction from DDR to FIFO and then from FIFO to DDR
int user_tests_1(u32 nBytes, Result results[SUB_TESTS], char mm2s){
	int status;



	xil_printf("--- Test begin, mm2s = %u\r\n", mm2s);

	//xil_printf("Entering profiling\r\n");
	status = test_1_profiling_latency(nBytes, results, mm2s);
	if(status != XST_SUCCESS){
		xil_printf("[TEST] Profiling and Latency failed \r\n");
		return XST_FAILURE;
	}
	xil_printf("Profiling Done\r\n");

	status = test_1_dropping(nBytes, results, mm2s);
	if(status != XST_SUCCESS){
		xil_printf("[TEST] Dropping failed \r\n");
		return XST_FAILURE;
	}
	xil_printf("Dropping Done\r\n");



	return XST_SUCCESS;
}

//Calculates t_profiling and t_latency and inserts the results into results[mm2s]
int test_1_profiling_latency(u32 nBytes, Result results[SUB_TESTS], char mm2s){
	DmaFlags flags;
	FifoParams fifo;
	int status;
	u32 read;
	u32 dataLength = 4000;//((WORD << 2) & (~0x01));


	/*
	 * First part of the test: Latency and Profiling calculation
	 */

	xil_printf("\t\t ---- Profiling & Latency Test ---- \n\r");

	if(test_init_memories(mm2s, dataLength) != XST_SUCCESS){
		xil_printf("[TEST | PROFILING] Memory initialization failed\r\n");
		return XST_FAILURE;
	}

	test_init_counters(DMA_LATENCY | DMA_PROFILING);



	if(user_gpio_get_fifo(&fifo, FIFO_WRITE_CNT | FIFO_READ_CNT | FIFO_FULL | FIFO_EMPTY) != XST_SUCCESS){
		xil_printf("[FIFO]: Get FIFO failed\r\n");
		return XST_FAILURE;
	}
	xil_printf("FIFO reads: %u writes: %u full: %u empty: %u\n\r", fifo.read_count, fifo.write_count, fifo.full, fifo.empty);


	xil_printf("Starting DMA transfer\n\r");
	status = user_dma_transfer(mm2s, DDR_BASE_ADDR, (mm2s == DMA_MM2S ? dataLength : nBytes), DMA_PROFILING | DMA_LATENCY);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	xil_printf("DMA Flag Wait\n\r");
	//Wait for the transfer to end
	do{
		user_dma_get_status(&flags);
	}while(!flags.transfer_done[(int)mm2s] && !flags.error[(int)mm2s]);
	xil_printf("DMA Flag Done\n\r");


	if(test_verify_transfer(DMA_LATENCY | DMA_PROFILING, mm2s, dataLength, flags, &fifo, &read) != XST_SUCCESS){
		xil_printf("[TEST | PROFILING] Result verification failed read = %u\r\n", read);
		return XST_FAILURE;
	}

	user_gpio_get_count(&(results[(int)mm2s].t_profiling), COUNTER_PROFILING); //Counter 1 is started in user_dma_transfer() when DMA_PROFIING option is used
	user_gpio_set_counter(COUNTER_PROFILING, COUNTER_SRESET);

	user_gpio_get_count(&(results[(int)mm2s].t_latency), COUNTER_LATENCY); //Counter 2 is stopped in user_dma_transfer() when DMA_LATENCY option is used
	user_gpio_set_counter(COUNTER_LATENCY, COUNTER_SRESET);


	if(results[(int)mm2s].t_profiling <=  COUNTER_1_DELAY){
		results[(int)mm2s].t_profiling = 0;
	}else{
		results[(int)mm2s].t_profiling -= COUNTER_1_DELAY;
	}

	if(results[(int)mm2s].t_latency <=  COUNTER_2_DELAY){
		results[(int)mm2s].t_latency = 0;
	}else{
		results[(int)mm2s].t_latency -= COUNTER_2_DELAY;
	}

	xil_printf("Latency and Profiling calculated successfully p: %u   l: %u\r\n", results[(int)mm2s].t_profiling, results[(int)mm2s].t_latency);


	return XST_SUCCESS;
}
//Calculates t_total, total_bytes and drop_rate and inserts the results into results[mm2s]
int test_1_dropping(u32 nBytes, Result results[SUB_TESTS], char mm2s){
	DmaFlags flags;
	FifoParams fifo;
	int status;
	u32 read;
	u32 dataLength = NBYTES;
	u32 result;
	char str_number[MAXC];

	/*
	 * Second part of the test: Throughput and drop rate calculation
	 */
	xil_printf("\t\t ---- Drop Rate & Throughput Test ---- \n\r");


	if(test_init_memories(mm2s, dataLength) != XST_SUCCESS){
		xil_printf("[TEST | DROP_RATE] Memory initialization failed\r\n");
		return XST_FAILURE;
	}

	test_init_counters(DMA_TOTAL);

	if(mm2s == DMA_S2MM){
		if(user_gpio_get_fifo(&fifo, FIFO_WRITE_CNT | FIFO_READ_CNT | FIFO_FULL | FIFO_EMPTY) != XST_SUCCESS){
			xil_printf("[FIFO]: Get FIFO failed\r\n");
			return XST_FAILURE;
		}
		xil_printf("FIFO reads: %u writes: %u full: %u empty: %u\n\r", fifo.read_count, fifo.write_count, fifo.full, fifo.empty);
	}
	xil_printf("Starting DMA transfer\n\r");
	//Configure and start the DMA transfer
	status = user_dma_transfer(mm2s, DDR_BASE_ADDR, (u32)dataLength, DMA_NOPTION);
	if(status != XST_SUCCESS){
		user_gpio_set_counter(1, COUNTER_SRESET);
		return XST_FAILURE;
	}

	//Wait for the transfer to end
	do{
		user_dma_get_status(&flags);
	}while(!flags.transfer_done[(int)mm2s] && !flags.error[(int)mm2s]);

	//Read the total time taken, this counter is stopped in the interrupt
	user_gpio_get_count(&(results[(int)mm2s].t_total), COUNTER_TOTAL);
	user_gpio_set_counter(COUNTER_TOTAL, COUNTER_SRESET);

	if(test_verify_transfer(DMA_TOTAL, mm2s, dataLength, flags, &fifo, &read) != XST_SUCCESS){
		xil_printf("[TEST | DROP RATE] Result verification failed read = %u\r\n", read);
		return XST_FAILURE;
	}

	results[(int)mm2s].bytes_transferred = read;
	if(read == NBYTES){
		results[(int)mm2s].drop_rate = 0;
	}else{
		results[(int)mm2s].drop_rate = (DP_DROP* ((u32)NBYTES - read))/NBYTES; //Always smaller or equal to 1*DR_DROP
	}

	result = (DP_THRP *  results[(int)mm2s].bytes_transferred * (F_CLK_PL / MEG)) / results[(int)mm2s].t_total ;

	results[(int)mm2s].throughput[0] = result / DP_THRP;
	results[(int)mm2s].throughput[1] = result % DP_THRP;

	visualizeFloat(str_number, DP_THRP, results[(int)mm2s].throughput[0], results[(int)mm2s].throughput[1]);


	xil_printf("Transferred Bytes %u,  Drop rate 0.%u, Total time %u and Throughput %s MBps calculated successfully\n\r",
			results[(int)mm2s].bytes_transferred,
			results[(int)mm2s].drop_rate,
			results[(int)mm2s].t_total,
			str_number);


	return XST_SUCCESS;

}

int test_init_memories(char mm2s, u32 dataLength){
	int i;
	xil_printf("Emptying FIFO\r\n");
	//Empty the FIFO
	if(user_tests_fillFIFO(dataLength, EMPTY) != XST_SUCCESS){
		xil_printf("[TEST] Profiling: FIFO empty failed \r\n");
		return XST_FAILURE;
	}

	if(mm2s == DMA_MM2S){

		//Initialize DDR for transfer
		xil_printf("Filling DDR\r\n");
		if(user_tests_fillDDR(dataLength, NEMPTY) != XST_SUCCESS){
			xil_printf("[TEST] Profiling: DDR fill failed \n\r");
			return XST_FAILURE;
		}

	}else{

		//Initialize FIFO for transfer
		xil_printf("Filling FIFO\r\n");
		if(user_tests_fillFIFO(dataLength, NEMPTY) != XST_SUCCESS){
			xil_printf("[TEST] Profiling: FIFO Fill failed \r\n");
			return XST_FAILURE;
		}

		xil_printf("Emptying DDR\n\r");
		//Empty the DDR
		if(user_tests_fillDDR(NBYTES, EMPTY) != XST_SUCCESS){
			xil_printf("[TEST] Profiling: DDR empty failed \n\r");
			return XST_FAILURE;
		}
		for(i = 0; i < dataLength; i+=2) Xil_Out16(DDR_BASE_ADDR + i, (u16)0x3);
	}
	return XST_SUCCESS;
}

void test_init_counters(u32 option){
	if(option & (DMA_LATENCY | DMA_PROFILING)){
		//Restart the counters
		user_gpio_set_counter(COUNTER_PROFILING, COUNTER_SRESET);
		user_gpio_set_counter(COUNTER_LATENCY, COUNTER_SRESET);

		//We start with a transfer of one word in order to compute the latency time and profiling
		user_gpio_set_counter(COUNTER_PROFILING, COUNTER_ENABLE);
	}else if(option & DMA_TOTAL){
		//Reset and enable counter 1
		user_gpio_set_counter(COUNTER_TOTAL, COUNTER_SRESET);
		//Counter Enabled
		user_gpio_set_counter(COUNTER_TOTAL, COUNTER_ENABLE);
	}
}

int test_verify_transfer(char option, char mm2s, u32 dataLength, DmaFlags flags, FifoParams *fifo, u32* read){
	u32 status_reg;
	u32 value;
	int i;

	//Check for errors in the transfer
	if(flags.error[(int)mm2s] == DMA_FLAG_ACTIVE){
		if(mm2s == DMA_S2MM){
			if(user_gpio_get_fifo(fifo, FIFO_WRITE_CNT | FIFO_READ_CNT | FIFO_FULL | FIFO_EMPTY) != XST_SUCCESS){
				xil_printf("[FIFO]: Get FIFO failed\r\n");
				return XST_FAILURE;
			}
			xil_printf("FIFO reads: %u writes: %u full: %u empty: %u\n\r", fifo->read_count, fifo->write_count, fifo->full, fifo->empty);
			user_tests_readDDR(dataLength);
		}
		xil_printf("DMA Error flag activated\r\n");
		user_dma_get_status_reg(mm2s, &status_reg);
		xil_printf("Status Register: 0x%x\r\n", status_reg);
		return XST_FAILURE;
	}

	if(option & (DMA_LATENCY | DMA_PROFILING)){
		//Check the memory to verify the transfer
		if(mm2s == DMA_MM2S){
			if(user_gpio_get_fifo(fifo, FIFO_WRITE_CNT | FIFO_READ_CNT) != XST_SUCCESS){
				xil_printf("[FIFO]: Get FIFO failed\r\n");
				return XST_FAILURE;
			}
			*read = (fifo->write_count << 2) & (~ 0x3);
			if(dataLength != (fifo->write_count << 2) ){
				xil_printf("FIFO read error");
				return XST_FAILURE;
			}

		}else{
			//We check if the transfer was successful
			*read = user_tests_readDDR(dataLength);
			for(i = 0; i < 80; i+=2){
				value = Xil_In16(DDR_BASE_ADDR + (u32)i);
				xil_printf("DDR Value at 0x%x is %u\r\n", DDR_BASE_ADDR + i, value);
			}
			if(*read == DDR_READ_ERROR || *read < dataLength){
				xil_printf("[DDR] Read Error\n\r");
				return XST_FAILURE;
			}
		}
	}else if(option & DMA_TOTAL){
		if(mm2s == DMA_MM2S){
				if(user_gpio_get_fifo(fifo, FIFO_WRITE_CNT) != XST_SUCCESS){
					xil_printf("[FIFO]: Get FIFO failed\r\n");
					return XST_FAILURE;
				}
				*read = (fifo->write_count << 2) & (~ 0x3);
			}else{
				//We check if the transfer was successful
				*read = user_tests_readDDR(NBYTES);
				if(*read == DDR_READ_ERROR){
					xil_printf("[DDR] Read Error\n\r");
					return XST_FAILURE;
				}
			}
	}

	return XST_SUCCESS;
}

//Fills RAM with nBytes bytes, incrementing by 0x1h and starting at XPAR_PS7_DDR_0_S_AXI_BASEADDR with the value 1
int user_tests_fillDDR(u32 nBytes, char empty){
	int i = 0;
	u16 value = 1;

	if (DDR_BASE_ADDR + nBytes >= DDR_HIGH_ADDR){
		return XST_FAILURE;
	}

	for(i = 0; i < (int)nBytes; i+=2) Xil_Out16(DDR_BASE_ADDR + i, (empty == NEMPTY ? value++ : 0));

	if(empty == NEMPTY){
		if(user_tests_readDDR(nBytes) < nBytes) return XST_FAILURE;

	}

	xil_printf("Data written from 0x%x to 0x%x with final value %u\r\n", DDR_BASE_ADDR, DDR_BASE_ADDR + i, (empty == NEMPTY ? value : 0));

	return XST_SUCCESS;
}

//Returns the total number of bytes written in the RAM
u32 user_tests_readDDR(u32 nBytes){
	u16 i = 0;
	u16 j = 0;
	u16 value = 0;
	u16 words = (u16) WORDS(nBytes);

	if (DDR_BASE_ADDR + words >= DDR_HIGH_ADDR){
		return DDR_READ_ERROR;
	}

	for(j = 1; j <= words; j+=0x1){
		value = Xil_In16(DDR_BASE_ADDR + (u32)i);
		//xil_printf("Reading DDR: value %u for at 0x%x\r\n", value, DDR_BASE_ADDR + (u32)i);
		if(value != j){
			//xil_printf("DDR Read: Requested = %u, Read = %u \r\n", nBytes, i);
			return i;
		}
		i = i + 0x2;

	}
	xil_printf("DDR Read: Requested = %u, Read = %u \r\n", nBytes, i);
	return (u32) i;
}

//If empty is NEMPTY the FIFO is filled with nBytes bytes. If empty is EMPTY the FIFO is restarted
int user_tests_fillFIFO(u32 nBytes, char empty){
	u32 bytesWritten = 0, toWrite = 0;
	DmaFlags flags;
	int status;
	FifoParams fifo;

	fifo.full = 0;

	if (empty == EMPTY){
		status = user_gpio_reset_fifo();
		if (status == XST_FAILURE){
			xil_printf("FIFO reset failed\n\r");
			if(user_gpio_get_fifo(&fifo, FIFO_WRITE_CNT | FIFO_READ_CNT | FIFO_FULL | FIFO_EMPTY) != XST_SUCCESS){
				xil_printf("[FIFO]: Get FIFO failed\r\n");
				return XST_FAILURE;
			}
			xil_printf("FIFO reads: %u writes: %u full: %u empty: %u\n\r", fifo.read_count, fifo.write_count, fifo.full, fifo.empty);

		}
		return status;

	}

	if (empty == NEMPTY){
		user_tests_fillDDR(nBytes, NEMPTY);
		while(bytesWritten < nBytes){
			toWrite = nBytes - bytesWritten;
			if(toWrite < 4) toWrite = 4;
			if(user_dma_transfer(DMA_MM2S, DDR_BASE_ADDR + bytesWritten, toWrite, DMA_NOPTION) != XST_SUCCESS){
				xil_printf("FIFO Fill: DMA Transfer Error\n\r");
				return XST_FAILURE;
			}

			do{
				user_dma_get_status(&flags);
			}while(!flags.transfer_done[DMA_MM2S] && !flags.error[DMA_MM2S]);

			if(flags.error[DMA_MM2S]){
				xil_printf("FIFO Fill: DMA Flag Error\n\r");
				return XST_FAILURE;
			}

			if(user_gpio_get_fifo(&fifo, FIFO_WRITE_CNT  | FIFO_FULL) != XST_SUCCESS) return XST_FAILURE;
			bytesWritten =((fifo.write_count << 2) & ~0x3 );
		}
		xil_printf("Bytes written: %u\n\r", bytesWritten);
		user_tests_fillDDR(nBytes, EMPTY);
		return XST_SUCCESS;
	}
	xil_printf("Wrong FIFO empty option \r\n");
	return XST_FAILURE;
}


//Analyzes the results from every test
int user_tests_analyse_results(Result results[TESTS][SUB_TESTS], Result average[SUB_TESTS], char visualize){
	int i, j;
	Result *current;
	char str_number[MAXC];
	if(visualize == RESULTS_VISUALIZE)xil_printf("\n------- Results -------\n\n");

	for(i = 0; i < SUB_TESTS; i++){
		average[i].drop_rate = 0;
		average[i].t_latency = 0;
		average[i].t_profiling = 0;
		average[i].t_total = 0;
		average[i].throughput[0] = 0;
		average[i].throughput[1] = 0;
	}

	for(i = 0; i < TESTS; i++){
		if (visualize == RESULTS_VISUALIZE) xil_printf("\n---- Test [%d] ----\n", i);
		for(j = 0; j < SUB_TESTS; j++){

			current = &results[i][j];

			if (visualize == RESULTS_VISUALIZE){
				xil_printf("\t---- Sub-test [%d] ----\n\r", j);
				xil_printf("\t\tTotal time: %u s\n\r"			, current->t_total);
				xil_printf("\t\tTotal Transfer: %d s\n\r"			, NBYTES);
				visualizeFloat(str_number, DP_THRP, current->throughput[0], current->throughput[1]);
				xil_printf("\t\tThroughput: %s MBps\n\r" 		, str_number);
				visualizeFloat(str_number, DP_DROP, 0, current->drop_rate);
				xil_printf("\t\tDrop Rate: %s \n\r"			, str_number);
				xil_printf("\t\tLatency: %u s\n\r"			, current->t_latency);
				xil_printf("\t\tProfiling: %u or %d %%\n\r"	, current->t_profiling, ((100 *current->t_profiling)/current->t_total));
			}

			average[j].throughput[0]  	+= (current->throughput[0] * DP_THRP / TESTS);
			average[j].throughput[1]  	+= ((current->throughput[0] * DP_THRP ) / TESTS) % DP_THRP;
			average[j].throughput[0]  	+= (current->throughput[1]/DP_THRP);
			average[j].drop_rate   		+= (current->drop_rate * DP_DROP  /TESTS);
			average[j].t_total 	   		+= (current->t_total     /TESTS);
			average[j].t_profiling 		+= (current->t_profiling /TESTS);
			average[j].t_latency   		+= (current->t_latency   /TESTS);

		}
	}
	if (visualize == RESULTS_VISUALIZE){
		current = &average[j];
		xil_printf("\t---- Average Results ----\n\r", j);

		xil_printf("\t\tTotal time: %u s\n\r"			, current->t_total);
		xil_printf("\t\tTotal Transfer: %d s\n\r"		, NBYTES);
		visualizeFloat(str_number, DP_THRP, current->throughput[0], current->throughput[1]);
		xil_printf("\t\tThroughput: %s MBps\n\r" 		, str_number);
		visualizeFloat(str_number, DP_DROP, 0, current->drop_rate);
		xil_printf("\t\tDrop Rate: %s \n\r"			, str_number);
		xil_printf("\t\tLatency: %u s\n\r"			, current->t_latency);
		xil_printf("\t\tProfiling: %u or %d %%\n\r"	, current->t_profiling, ((100 *current->t_profiling)/current->t_total));

	}


	return XST_SUCCESS;

}



//Converts upper and lower values of a float represented by two numbers to a string
void visualizeFloat(char number_string[MAXC],int decimalPlaces, u32 value_upper, u32 value_lower){
	int i = 0, j = 0, dp = 0;
	char lowerNumber[MAXC];

	do{
		decimalPlaces /= 10;
		dp++;
	}while(decimalPlaces >= 10);


	for (i = dp - 1, j = 10; i >= 0; i--, j*=10){
		lowerNumber[i] = '0' + ((value_lower % j) / (j / 10));
	}
	lowerNumber[dp] = '\0';
	sprintf(number_string, "%lu.%s", value_upper, lowerNumber);
}
